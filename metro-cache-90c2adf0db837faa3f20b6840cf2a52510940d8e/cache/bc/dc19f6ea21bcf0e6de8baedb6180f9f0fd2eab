__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _getSupportedFormats = _require(_dependencyMap[0], "../Audio/getSupportedFormats");

  var _getSupportedFormats2 = _interopRequireDefault(_getSupportedFormats);

  var _VRAudioComponent = _require(_dependencyMap[1], "../Audio/VRAudioComponent");

  var _VRAudioComponent2 = _interopRequireDefault(_VRAudioComponent);

  var _VRAudioContext = _require(_dependencyMap[2], "../Audio/VRAudioContext");

  var _VRAudioContext2 = _interopRequireDefault(_VRAudioContext);

  var _Module2 = _require(_dependencyMap[3], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  var _three = _require(_dependencyMap[4], "three");

  var THREE = _interopRequireWildcard(_three);

  var _MediaEvent = _require(_dependencyMap[5], "../Events/MediaEvent");

  var _MediaEvent2 = _interopRequireDefault(_MediaEvent);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var MEDIA_EVENT_CALLBACK_NAME = {
    canplay: 'onAudioCanPlay',
    durationchange: 'onAudioDurationChange',
    ended: 'onAudioEnded',
    error: 'onAudioError',
    timeupdate: 'onAudioTimeUpdate',
    playing: 'onAudioPlaying',
    pause: 'onAudioPause'
  };

  var RCTAudioModule = function (_Module) {
    _inherits(RCTAudioModule, _Module);

    function RCTAudioModule(rnctx) {
      _classCallCheck(this, RCTAudioModule);

      var _this = _possibleConstructorReturn(this, (RCTAudioModule.__proto__ || Object.getPrototypeOf(RCTAudioModule)).call(this, 'RCTAudioModule'));

      _this.audioContext = _VRAudioContext2.default.supported() ? new _VRAudioContext2.default() : null;
      _this.supportedFormats = (0, _getSupportedFormats2.default)() || [];
      _this._audioDefs = {};
      _this._components = {};
      _this._rnctx = rnctx;
      _this._mediaEventCallbacks = {};
      return _this;
    }

    _createClass(RCTAudioModule, [{
      key: "addHandle",
      value: function addHandle(handle) {
        var audioConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!this.audioContext) {
          return;
        }

        var component = new _VRAudioComponent2.default(this.audioContext, audioConfig);
        this._components[handle] = component;
        this._audioDefs[handle] = this._createAudioDef();
        this._mediaEventCallbacks[handle] = {};
        component.onMediaEvent = this._onMediaEvent.bind(this, handle);
      }
    }, {
      key: "_createAudioDef",
      value: function _createAudioDef() {
        return {
          streamingType: 'buffer'
        };
      }
    }, {
      key: "_onMediaEvent",
      value: function _onMediaEvent(handle, event) {
        var eventType = event.type;

        if (MEDIA_EVENT_CALLBACK_NAME[eventType]) {
          var callbackName = MEDIA_EVENT_CALLBACK_NAME[eventType];
          var mediaEvent = new _MediaEvent2.default(event);

          this._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', [callbackName, handle, mediaEvent]);

          var listeners = this._mediaEventCallbacks[handle] ? this._mediaEventCallbacks[handle][eventType] : null;

          if (listeners) {
            listeners.forEach(function (listener) {
              return listener(handle, mediaEvent);
            });
          }
        }
      }
    }, {
      key: "_addMediaEventListener",
      value: function _addMediaEventListener(handle, eventType, listener) {
        if (!this._mediaEventCallbacks[handle]) {
          console.warn('RCTAudioModule.addMediaEventListener: ' + ("can't add listener on a not exist handle: " + handle));
          return;
        }

        if (!MEDIA_EVENT_CALLBACK_NAME[eventType]) {
          console.warn('RCTAudioModule.addMediaEventListener: ' + ("can't add listener on a not supported eventType: " + eventType));
          return;
        }

        if (!this._mediaEventCallbacks[handle][eventType]) {
          this._mediaEventCallbacks[handle][eventType] = [];
        }

        var listeners = this._mediaEventCallbacks[handle][eventType];

        if (listeners.indexOf(listener) === -1) {
          listeners.push(listener);
        }
      }
    }, {
      key: "_removeMediaEventListener",
      value: function _removeMediaEventListener(handle, eventType, listener) {
        if (!this._mediaEventCallbacks[handle] || !this._mediaEventCallbacks[handle][eventType]) {
          return;
        }

        var listeners = this._mediaEventCallbacks[handle][eventType];

        if (listeners) {
          var index = listeners.indexOf(listener);

          if (index !== -1) {
            listeners.splice(index, 1);
          }
        }
      }
    }, {
      key: "setUrl",
      value: function setUrl(handle, url) {
        this._audioDefs[handle].src = url;
      }
    }, {
      key: "load",
      value: function load(handle) {
        this._components[handle].setAudio(this._audioDefs[handle]);
      }
    }, {
      key: "play",
      value: function play(handle) {
        this._components[handle].play();
      }
    }, {
      key: "seekTo",
      value: function seekTo(handle, position) {
        this._components[handle].seekTo(position);
      }
    }, {
      key: "pause",
      value: function pause(handle) {
        this._components[handle].pause();
      }
    }, {
      key: "stop",
      value: function stop(handle) {
        this._components[handle].stop();
      }
    }, {
      key: "unload",
      value: function unload(handle) {
        this._components[handle].dispose();

        delete this._components[handle];
        delete this._audioDefs[handle];
        delete this._mediaEventCallbacks[handle];
      }
    }, {
      key: "setPosition",
      value: function setPosition(handle, position) {
        var vec = new THREE.Vector3();
        vec.fromArray(position);
        this._components[handle].position = vec;
      }
    }, {
      key: "setVolume",
      value: function setVolume(handle, volume) {
        if (typeof volume !== 'number') {
          console.warn('AudioModule setVolume expected args (handle: string, volume: number)');
          return;
        }

        this._components[handle].volume = volume;
      }
    }, {
      key: "setMuted",
      value: function setMuted(handle, muted) {
        this._components[handle].muted = muted;
      }
    }, {
      key: "frame",
      value: function frame(camera) {
        if (this.audioContext) {
          this.audioContext.frame(camera);
        }

        for (var key in this._components) {
          this._components[key].frame();
        }
      }
    }]);

    return RCTAudioModule;
  }(_Module3.default);

  exports.default = RCTAudioModule;
});