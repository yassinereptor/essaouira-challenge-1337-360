__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _three = _require(_dependencyMap[0], "three");

  var THREE = _interopRequireWildcard(_three);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTHeadModel = function () {
    function RCTHeadModel(rnctx) {
      _classCallCheck(this, RCTHeadModel);

      this._rnctx = rnctx;
    }

    _createClass(RCTHeadModel, [{
      key: "sendHeadModel",
      value: function sendHeadModel(camera) {
        camera.updateMatrixWorld(true);
        var headMatrix = camera.matrixWorld;
        var viewMatrix = new THREE.Matrix4();
        viewMatrix.getInverse(headMatrix);
        var headMatrixArray = headMatrix.toArray();
        var viewMatrixArray = viewMatrix.toArray();
        var target = this._rnctx.lastHit ? this._rnctx.getHitTag(this._rnctx.lastHit) : null;
        var source = this._rnctx.lastSource;

        if (target) {
          this._rnctx.callFunction('RCTEventEmitter', 'receiveEvent', [target, 'topHeadPose', {
            headMatrix: headMatrixArray,
            viewMatrix: viewMatrixArray,
            target: target,
            source: source
          }]);
        }

        this._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['onReceivedHeadMatrix', headMatrixArray, viewMatrixArray, camera.fov, camera.aspect]);
      }
    }, {
      key: "frame",
      value: function frame(camera) {
        this.sendHeadModel(camera);
      }
    }]);

    return RCTHeadModel;
  }();

  exports.default = RCTHeadModel;
});