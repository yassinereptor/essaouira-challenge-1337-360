__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  _require(_dependencyMap[0], "../Types");

  _require(_dependencyMap[1], "./Types");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var DEFAULT_FOV = Math.PI / 6;
  var HALF_PI = Math.PI / 2;

  var MousePanCameraController = function () {
    function MousePanCameraController(frame) {
      var fov = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_FOV;

      _classCallCheck(this, MousePanCameraController);

      this._deltaYaw = 0;
      this._deltaPitch = 0;
      this._draggingMouse = false;
      this._draggingTouch = false;
      this._enabled = true;
      this._frame = frame;
      this._lastMouseX = 0;
      this._lastMouseY = 0;
      this._lastTouchX = 0;
      this._lastTouchY = 0;
      this._verticalFov = fov;
      this._onMouseDown = this._onMouseDown.bind(this);
      this._onMouseMove = this._onMouseMove.bind(this);
      this._onMouseUp = this._onMouseUp.bind(this);
      this._onTouchStart = this._onTouchStart.bind(this);
      this._onTouchMove = this._onTouchMove.bind(this);
      this._onTouchEnd = this._onTouchEnd.bind(this);

      this._frame.addEventListener('mousedown', this._onMouseDown);

      document.addEventListener('mousemove', this._onMouseMove);
      document.addEventListener('mouseup', this._onMouseUp);

      this._frame.addEventListener('touchstart', this._onTouchStart);

      this._frame.addEventListener('touchmove', this._onTouchMove);

      this._frame.addEventListener('touchcancel', this._onTouchEnd);

      this._frame.addEventListener('touchend', this._onTouchEnd);
    }

    _createClass(MousePanCameraController, [{
      key: "_onMouseDown",
      value: function _onMouseDown(e) {
        if (!this._enabled) {
          return;
        }

        this._draggingMouse = true;
        this._lastMouseX = e.clientX;
        this._lastMouseY = e.clientY;
      }
    }, {
      key: "_onMouseMove",
      value: function _onMouseMove(e) {
        if (!this._draggingMouse) {
          return;
        }

        var width = this._frame.clientWidth;
        var height = this._frame.clientHeight;
        var aspect = width / height;
        var deltaX = e.clientX - this._lastMouseX;
        var deltaY = e.clientY - this._lastMouseY;
        this._lastMouseX = e.clientX;
        this._lastMouseY = e.clientY;
        this._deltaPitch += deltaX / width * this._verticalFov * aspect;
        this._deltaYaw += deltaY / height * this._verticalFov;
        this._deltaYaw = Math.max(-HALF_PI, Math.min(HALF_PI, this._deltaYaw));
      }
    }, {
      key: "_onMouseUp",
      value: function _onMouseUp() {
        this._draggingMouse = false;
      }
    }, {
      key: "_onTouchStart",
      value: function _onTouchStart(e) {
        if (!this._enabled) {
          return;
        }

        this._draggingTouch = true;
        this._lastTouchX = e.changedTouches[0].clientX;
        this._lastTouchY = e.changedTouches[0].clientY;
      }
    }, {
      key: "_onTouchMove",
      value: function _onTouchMove(e) {
        if (!this._draggingTouch) {
          return;
        }

        var x = e.changedTouches[0].clientX;
        var y = e.changedTouches[0].clientY;
        var width = this._frame.clientWidth;
        var height = this._frame.clientHeight;
        var aspect = width / height;
        var deltaX = x - this._lastTouchX;
        var deltaY = y - this._lastTouchY;
        this._lastTouchX = x;
        this._lastTouchY = y;
        this._deltaPitch += deltaX / width * this._verticalFov * aspect;
        this._deltaYaw += deltaY / height * this._verticalFov;
        this._deltaYaw = Math.max(-HALF_PI, Math.min(HALF_PI, this._deltaYaw));
      }
    }, {
      key: "_onTouchEnd",
      value: function _onTouchEnd(e) {
        this._draggingTouch = false;
      }
    }, {
      key: "enable",
      value: function enable() {
        this._enabled = true;
        this._draggingMouse = false;
        this._draggingTouch = false;
      }
    }, {
      key: "disable",
      value: function disable() {
        this._enabled = false;
        this._draggingMouse = false;
        this._draggingTouch = false;
      }
    }, {
      key: "fillCameraProperties",
      value: function fillCameraProperties(position, rotation) {
        if (!this._enabled) {
          return false;
        }

        if (this._deltaPitch === 0 && this._deltaYaw === 0) {
          return false;
        }

        var cp = Math.cos(this._deltaPitch / 2);
        var sp = Math.sin(this._deltaPitch / 2);
        var cy = Math.cos(this._deltaYaw / 2);
        var sy = Math.sin(this._deltaYaw / 2);
        var x1 = rotation[0];
        var y1 = rotation[1];
        var z1 = rotation[2];
        var w1 = rotation[3];
        var x2 = cp * x1 + sp * z1;
        var y2 = cp * y1 + sp * w1;
        var z2 = cp * z1 - sp * x1;
        var w2 = cp * w1 - sp * y1;
        var x3 = w2 * sy + x2 * cy;
        var y3 = y2 * cy + z2 * sy;
        var z3 = -y2 * sy + z2 * cy;
        var w3 = w2 * cy - x2 * sy;
        rotation[0] = x3;
        rotation[1] = y3;
        rotation[2] = z3;
        rotation[3] = w3;
        this._deltaPitch = 0;
        this._deltaYaw = 0;
        return true;
      }
    }]);

    return MousePanCameraController;
  }();

  exports.default = MousePanCameraController;
});