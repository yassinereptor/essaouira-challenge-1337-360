__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EnvironmentModule = function (_Module) {
    _inherits(EnvironmentModule, _Module);

    function EnvironmentModule(env) {
      _classCallCheck(this, EnvironmentModule);

      var _this = _possibleConstructorReturn(this, (EnvironmentModule.__proto__ || Object.getPrototypeOf(EnvironmentModule)).call(this, 'EnvironmentModule'));

      _this._env = env;
      _this._preloadedSrc = null;
      return _this;
    }

    _createClass(EnvironmentModule, [{
      key: "loadScene",
      value: function loadScene(scene, transition) {
        var screenIds = scene.screenIds || ['default'];

        this._env.updateScreenIds(screenIds);

        transition = transition || {};

        if (scene.type === 'black') {
          this._env.setSource(null);

          return;
        }

        if (scene.type === 'photo') {
          this._env.setSource(scene.url, {
            format: scene.stereo,
            transition: transition.transition,
            fadeLevel: transition.fadeLevel,
            rotateTransform: scene.rotateTransform
          });

          return;
        }

        if (scene.type === 'video') {
          this._env.setVideoSource(scene.player, {
            transition: transition.transition,
            fadeLevel: transition.fadeLevel,
            rotateTransform: scene.rotateTransform
          });
        }
      }
    }, {
      key: "preloadScene",
      value: function preloadScene(scene) {
        if (scene.type === 'photo') {
          if (this._preloadedSrc === scene.url) {
            return;
          }

          if (this._preloadedSrc) {
            this._env.unloadImage(this._preloadedSrc);

            this._preloadedSrc = null;
          }

          if (scene.url) {
            this._env.preloadImage(scene.url);

            this._preloadedSrc = scene.url;
          }
        }
      }
    }, {
      key: "setScreen",
      value: function setScreen(screen) {
        if (screen.type === 'surface') {
          var surfaceScreen = screen;
          var id = surfaceScreen.id || 'default';
          var handle = surfaceScreen.player === undefined ? 'default' : surfaceScreen.player;

          this._env.setScreen(id, handle, surfaceScreen.surface, surfaceScreen.x, surfaceScreen.y, surfaceScreen.width, surfaceScreen.height);

          return;
        }
      }
    }, {
      key: "animateFade",
      value: function animateFade(fadeLevel, fadeTime) {
        this._env.animateFade(fadeLevel, fadeTime);
      }
    }]);

    return EnvironmentModule;
  }(_Module3.default);

  exports.default = EnvironmentModule;
});