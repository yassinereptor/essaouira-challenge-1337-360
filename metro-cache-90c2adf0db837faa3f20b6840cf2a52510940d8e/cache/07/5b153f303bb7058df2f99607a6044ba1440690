__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var VRState = function () {
    function VRState() {
      var _this = this;

      _classCallCheck(this, VRState);

      this._displayChangeCallbacks = [];
      this._enterCallbacks = [];
      this._exitCallbacks = [];
      this.onDisplayActivate = this.onDisplayActivate.bind(this);
      this.onDisplayDeactivate = this.onDisplayDeactivate.bind(this);
      this.onDisplayConnect = this.onDisplayConnect.bind(this);
      this.onDisplayDisconnect = this.onDisplayDisconnect.bind(this);
      this.onDisplayPresentChange = this.onDisplayPresentChange.bind(this);
      window.addEventListener('vrdisplayconnect', this.onDisplayConnect);
      window.addEventListener('vrdisplaydisconnect', this.onDisplayDisconnect);
      window.addEventListener('vrdisplaypresentchange', this.onDisplayPresentChange);

      if (typeof navigator.getVRDisplays === 'function') {
        navigator.getVRDisplays().then(function (displays) {
          if (displays.length) {
            _this.setCurrentDisplay(displays[0]);
          }
        });
      }
    }

    _createClass(VRState, [{
      key: "_callEnterCallbacks",
      value: function _callEnterCallbacks() {
        for (var i = 0; i < this._enterCallbacks.length; i++) {
          this._enterCallbacks[i]();
        }
      }
    }, {
      key: "_callExitCallbacks",
      value: function _callExitCallbacks() {
        for (var i = 0; i < this._exitCallbacks.length; i++) {
          this._exitCallbacks[i]();
        }
      }
    }, {
      key: "_callDisplayChangeCallbacks",
      value: function _callDisplayChangeCallbacks() {
        for (var i = 0; i < this._displayChangeCallbacks.length; i++) {
          this._displayChangeCallbacks[i](this.vrDisplay);
        }
      }
    }, {
      key: "onEnter",
      value: function onEnter(cb) {
        this._enterCallbacks.push(cb);
      }
    }, {
      key: "onExit",
      value: function onExit(cb) {
        this._exitCallbacks.push(cb);
      }
    }, {
      key: "onDisplayChange",
      value: function onDisplayChange(cb) {
        this._displayChangeCallbacks.push(cb);
      }
    }, {
      key: "setCurrentDisplay",
      value: function setCurrentDisplay(display) {
        this.vrDisplay = display;

        this._callDisplayChangeCallbacks();
      }
    }, {
      key: "getCurrentDisplay",
      value: function getCurrentDisplay() {
        return this.vrDisplay;
      }
    }, {
      key: "isPresenting",
      value: function isPresenting() {
        return !!this.vrDisplay && this.vrDisplay.isPresenting;
      }
    }, {
      key: "onDisplayActivate",
      value: function onDisplayActivate(_ref) {
        var display = _ref.display;

        if (display === this.vrDisplay) {}
      }
    }, {
      key: "onDisplayDeactivate",
      value: function onDisplayDeactivate(_ref2) {
        var display = _ref2.display;

        if (display === this.vrDisplay) {}
      }
    }, {
      key: "onDisplayConnect",
      value: function onDisplayConnect(_ref3) {
        var display = _ref3.display;

        if (this.vrDisplay) {
          return;
        }

        this.setCurrentDisplay(display);
      }
    }, {
      key: "onDisplayDisconnect",
      value: function onDisplayDisconnect(_ref4) {
        var _this2 = this;

        var display = _ref4.display;

        if (display !== this.vrDisplay) {
          return;
        }

        if (typeof navigator.getVRDisplays === 'function') {
          navigator.getVRDisplays().then(function (displays) {
            if (displays.length === 0) {
              _this2.setCurrentDisplay(displays[0]);
            } else {
              _this2.setCurrentDisplay(null);
            }
          });
        }
      }
    }, {
      key: "onDisplayPresentChange",
      value: function onDisplayPresentChange(_ref5) {
        var display = _ref5.display;

        if (this.vrDisplay && display && display.displayId === this.vrDisplay.displayId) {
          if (!display.isPresenting) {
            this._callExitCallbacks();
          }
        }
      }
    }]);

    return VRState;
  }();

  exports.default = VRState;
});