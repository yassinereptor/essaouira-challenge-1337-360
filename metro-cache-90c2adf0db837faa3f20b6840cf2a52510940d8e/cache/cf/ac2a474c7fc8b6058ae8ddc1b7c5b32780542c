__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  _require(_dependencyMap[0], "../Types");

  _require(_dependencyMap[1], "./Types");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var TYPE = 'mouse';

  var MouseRaycaster = function () {
    function MouseRaycaster(frame) {
      var fov = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;

      _classCallCheck(this, MouseRaycaster);

      this._enabled = true;
      this._fov = fov;
      this._frame = frame;
      this._lastX = null;
      this._lastY = null;
      this._onMouseMove = this._onMouseMove.bind(this);
      frame.addEventListener('mousemove', this._onMouseMove);
    }

    _createClass(MouseRaycaster, [{
      key: "_onMouseMove",
      value: function _onMouseMove(e) {
        if (!this._enabled) {
          return;
        }

        var width = this._frame.clientWidth;
        var height = this._frame.clientHeight;
        var x = e.offsetX / width * 2 - 1;
        var y = -(e.offsetY / height) * 2 + 1;
        this._lastX = x;
        this._lastY = y;
      }
    }, {
      key: "enable",
      value: function enable() {
        this._enabled = true;
      }
    }, {
      key: "disable",
      value: function disable() {
        this._enabled = false;
      }
    }, {
      key: "getType",
      value: function getType() {
        return TYPE;
      }
    }, {
      key: "getMaxLength",
      value: function getMaxLength() {
        return Infinity;
      }
    }, {
      key: "fillDirection",
      value: function fillDirection(direction) {
        if (!this._enabled) {
          return false;
        }

        var lastX = this._lastX;
        var lastY = this._lastY;

        if (lastX === null || lastY === null) {
          return false;
        }

        var fov = this._fov * Math.PI / 180;
        var tan = Math.tan(fov / 2);
        var aspect = this._frame.clientWidth / this._frame.clientHeight;
        var x = aspect * tan * lastX;
        var y = tan * lastY;
        var mag = Math.sqrt(1 + x * x + y * y);
        direction[0] = x / mag;
        direction[1] = y / mag;
        direction[2] = -1 / mag;
        return true;
      }
    }, {
      key: "fillOrigin",
      value: function fillOrigin(origin) {
        if (!this._enabled) {
          return false;
        }

        origin[0] = 0;
        origin[1] = 0;
        origin[2] = 0;
        return true;
      }
    }, {
      key: "drawsCursor",
      value: function drawsCursor() {
        return false;
      }
    }, {
      key: "hasAbsoluteCoordinates",
      value: function hasAbsoluteCoordinates() {
        return false;
      }
    }]);

    return MouseRaycaster;
  }();

  exports.default = MouseRaycaster;
});