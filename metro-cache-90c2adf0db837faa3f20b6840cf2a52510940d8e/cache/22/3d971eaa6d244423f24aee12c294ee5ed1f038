__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var History = function (_Module) {
    _inherits(History, _Module);

    function History(rnctx) {
      _classCallCheck(this, History);

      var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, 'History'));

      _this._rnctx = rnctx;
      window.addEventListener('popstate', function (event) {
        _this._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['historyPopState', {
          state: event.state
        }]);

        _this._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['url', window.location.toString()]);
      });
      return _this;
    }

    _createClass(History, [{
      key: "$length",
      value: function $length(success) {
        this._rnctx.invokeCallback(success, [window.history.length]);
      }
    }, {
      key: "$state",
      value: function $state(success) {
        this._rnctx.invokeCallback(success, [window.history.state]);
      }
    }, {
      key: "$back",
      value: function $back(success) {
        window.history.back();

        this._rnctx.invokeCallback(success, [true]);
      }
    }, {
      key: "$forward",
      value: function $forward(success) {
        window.history.forward();

        this._rnctx.invokeCallback(success, [true]);
      }
    }, {
      key: "$go",
      value: function $go(delta, success) {
        window.history.go(delta);

        this._rnctx.invokeCallback(success, [true]);
      }
    }, {
      key: "$pushState",
      value: function $pushState() {
        var _ref2, _ref3;

        if (arguments.length < 4) {
          var _ref;

          this._rnctx.invokeCallback((_ref = arguments.length - 1, arguments.length <= _ref ? undefined : arguments[_ref]), [new Error('pushState requires at least two arguments')]);

          return;
        }

        var state = arguments.length <= 0 ? undefined : arguments[0];
        var title = arguments.length <= 1 ? undefined : arguments[1];
        var success = (_ref2 = arguments.length - 2, arguments.length <= _ref2 ? undefined : arguments[_ref2]);
        var fail = (_ref3 = arguments.length - 1, arguments.length <= _ref3 ? undefined : arguments[_ref3]);
        var url = arguments.length === 4 ? undefined : arguments.length <= 2 ? undefined : arguments[2];

        try {
          window.history.pushState(state, title, url);

          this._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['url', window.location.toString()]);

          this._rnctx.invokeCallback(success, [true]);
        } catch (e) {
          this._rnctx.invokeCallback(fail, [e]);
        }
      }
    }, {
      key: "$replaceState",
      value: function $replaceState() {
        var _ref5, _ref6;

        if (arguments.length < 4) {
          var _ref4;

          this._rnctx.invokeCallback((_ref4 = arguments.length - 1, arguments.length <= _ref4 ? undefined : arguments[_ref4]), [new Error('replaceState requires at least two arguments')]);

          return;
        }

        var state = arguments.length <= 0 ? undefined : arguments[0];
        var title = arguments.length <= 1 ? undefined : arguments[1];
        var success = (_ref5 = arguments.length - 2, arguments.length <= _ref5 ? undefined : arguments[_ref5]);
        var fail = (_ref6 = arguments.length - 1, arguments.length <= _ref6 ? undefined : arguments[_ref6]);
        var url = arguments.length === 4 ? undefined : arguments.length <= 2 ? undefined : arguments[2];

        try {
          window.history.pushState(state, title, url);

          this._rnctx.invokeCallback(success, [true]);
        } catch (e) {
          this._rnctx.invokeCallback(fail, [e]);
        }
      }
    }]);

    return History;
  }(_Module3.default);

  exports.default = History;
});