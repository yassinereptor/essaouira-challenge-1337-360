__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var initialURL = location.href;

  var LinkingManager = function (_Module) {
    _inherits(LinkingManager, _Module);

    function LinkingManager(rnctx) {
      _classCallCheck(this, LinkingManager);

      var _this = _possibleConstructorReturn(this, (LinkingManager.__proto__ || Object.getPrototypeOf(LinkingManager)).call(this, 'LinkingManager'));

      _this._rnctx = rnctx;
      return _this;
    }

    _createClass(LinkingManager, [{
      key: "$openURL",
      value: function $openURL(url, success, fail) {
        window.location = new URL(url, window.location).toString();

        this._rnctx.invokeCallback(success, [true]);
      }
    }, {
      key: "$canOpenURL",
      value: function $canOpenURL(url, success, fail) {
        this._rnctx.invokeCallback(success, [true]);
      }
    }, {
      key: "$getInitialURL",
      value: function $getInitialURL(success, fail) {
        this._rnctx.invokeCallback(success, [initialURL]);
      }
    }]);

    return LinkingManager;
  }(_Module3.default);

  exports.default = LinkingManager;
});