__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function drawGlyph(context, instructions) {
    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#ffffff';
    context.fillStyle = color;

    for (var i = 0, length = instructions.length; i < length; i++) {
      switch (instructions[i][0]) {
        case 'move':
          {
            var x = instructions[i][1];
            var y = instructions[i][2];
            context.moveTo(x, y);
            break;
          }

        case 'line':
          {
            var _x2 = instructions[i][1];
            var _y = instructions[i][2];
            context.lineTo(_x2, _y);
            break;
          }

        case 'arc':
          {
            var _x3 = instructions[i][1];
            var _y2 = instructions[i][2];
            var radius = instructions[i][3];
            var startAngle = instructions[i][4];
            var endAngle = instructions[i][5];
            var anticlockwise = !!instructions[i][6];
            context.arc(_x3, _y2, radius, startAngle, endAngle, anticlockwise);
            break;
          }

        case 'rect':
          {
            var _x4 = instructions[i][1];
            var _y3 = instructions[i][2];
            var _width = instructions[i][3];
            var _height = instructions[i][4];
            context.rect(_x4, _y3, _width, _height);
            break;
          }

        case 'begin':
          context.beginPath();
          break;

        case 'end':
          context.fill();
          break;
      }
    }

    if (instructions.length && instructions[instructions.length - 1][0] !== 'end') {
      context.fill();
    }
  }

  var GlyphTextures = function (_Module) {
    _inherits(GlyphTextures, _Module);

    function GlyphTextures(rnctx) {
      _classCallCheck(this, GlyphTextures);

      var _this = _possibleConstructorReturn(this, (GlyphTextures.__proto__ || Object.getPrototypeOf(GlyphTextures)).call(this, 'GlyphTextures'));

      _this._rnctx = rnctx;
      return _this;
    }

    _createClass(GlyphTextures, [{
      key: "registerGlyph",
      value: function registerGlyph(name, glyph) {
        var canvas = document.createElement('canvas');
        canvas.width = glyph.width;
        canvas.height = glyph.height;
        var context = canvas.getContext('2d');

        if (!context) {
          throw new Error('Could not generate 2d context of canvas');
        }

        context.translate(0.5, 0.5);
        drawGlyph(context, glyph.instructions, glyph.color);
        var url = 'glyph/' + name;

        this._rnctx.TextureManager.registerLocalTextureSource(url, canvas);
      }
    }]);

    return GlyphTextures;
  }(_Module3.default);

  exports.default = GlyphTextures;
});