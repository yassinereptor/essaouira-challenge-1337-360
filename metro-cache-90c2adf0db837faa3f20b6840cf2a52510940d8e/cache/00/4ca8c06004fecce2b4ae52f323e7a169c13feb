__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function encodePosition(_ref) {
    var coords = _ref.coords,
        timestamp = _ref.timestamp;
    return {
      coords: {
        latitude: coords.latitude,
        longitude: coords.longitude,
        altitude: coords.altitude,
        accuracy: coords.accuracy,
        altitudeAccuracy: coords.altitudeAccuracy,
        heading: coords.heading
      },
      timestamp: timestamp
    };
  }

  var LocationObserver = function (_Module) {
    _inherits(LocationObserver, _Module);

    function LocationObserver(rnctx) {
      _classCallCheck(this, LocationObserver);

      var _this = _possibleConstructorReturn(this, (LocationObserver.__proto__ || Object.getPrototypeOf(LocationObserver)).call(this, 'LocationObserver'));

      _this._rnctx = rnctx;
      _this._watchID = null;
      return _this;
    }

    _createClass(LocationObserver, [{
      key: "requestAuthorization",
      value: function requestAuthorization() {
        navigator.geolocation.getCurrentPosition(function () {});
      }
    }, {
      key: "getCurrentPosition",
      value: function getCurrentPosition(options, onSuccess, onError) {
        var _this2 = this;

        if (!navigator.geolocation) {
          this._rnctx.invokeCallback(onError, []);
        }

        var watchOptions = {};

        if (typeof options.enableHighAccuracy === 'boolean') {
          watchOptions.enableHighAccuracy = options.enableHighAccuracy;
        }

        if (typeof options.maximumAge === 'number') {
          watchOptions.maximumAge = options.maximumAge;
        }

        if (typeof options.timeout === 'number') {
          watchOptions.timeout = options.timeout;
        }

        navigator.geolocation.getCurrentPosition(function (pos) {
          _this2._rnctx.invokeCallback(onSuccess, [encodePosition(pos)]);
        }, function (err) {
          var code = err.code,
              message = err.message;

          _this2._rnctx.invokeCallback(onError, [{
            code: code,
            message: message
          }]);
        }, watchOptions);
      }
    }, {
      key: "startObserving",
      value: function startObserving(options) {
        var _this3 = this;

        if (this._watchID === null) {
          var watchOptions = {};

          if (typeof options.enableHighAccuracy === 'boolean') {
            watchOptions.enableHighAccuracy = options.enableHighAccuracy;
          }

          if (typeof options.maximumAge === 'number') {
            watchOptions.maximumAge = options.maximumAge;
          }

          if (typeof options.timeout === 'number') {
            watchOptions.timeout = options.timeout;
          }

          this._watchID = navigator.geolocation.watchPosition(function (pos) {
            _this3._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['geolocationDidChange', encodePosition(pos)]);
          }, function (_ref2) {
            var code = _ref2.code,
                message = _ref2.message;

            _this3._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['geolocationError', {
              code: code,
              message: message
            }]);
          }, watchOptions);
        }
      }
    }, {
      key: "stopObserving",
      value: function stopObserving() {
        if (this._watchID !== null) {
          navigator.geolocation.clearWatch(this._watchID);
        }
      }
    }]);

    return LocationObserver;
  }(_Module3.default);

  exports.default = LocationObserver;
});