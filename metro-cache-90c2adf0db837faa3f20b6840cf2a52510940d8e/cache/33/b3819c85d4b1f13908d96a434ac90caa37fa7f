__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ReactNativeContext = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _AndroidConstants = _require(_dependencyMap[0], "./Modules/AndroidConstants");

  var _AndroidConstants2 = _interopRequireDefault(_AndroidConstants);

  var _AsyncLocalStorage = _require(_dependencyMap[1], "./Modules/AsyncLocalStorage");

  var _AsyncLocalStorage2 = _interopRequireDefault(_AsyncLocalStorage);

  var _ControllerInfo = _require(_dependencyMap[2], "./Modules/ControllerInfo");

  var _ControllerInfo2 = _interopRequireDefault(_ControllerInfo);

  var _DeviceInfo = _require(_dependencyMap[3], "./Modules/DeviceInfo");

  var _DeviceInfo2 = _interopRequireDefault(_DeviceInfo);

  var _ExternalAssets = _require(_dependencyMap[4], "./Modules/ExternalAssets");

  var _ExternalAssets2 = _interopRequireDefault(_ExternalAssets);

  var _GlyphTextures = _require(_dependencyMap[5], "./Modules/GlyphTextures");

  var _GlyphTextures2 = _interopRequireDefault(_GlyphTextures);

  var _History = _require(_dependencyMap[6], "./Modules/History");

  var _History2 = _interopRequireDefault(_History);

  var _LinkingManager = _require(_dependencyMap[7], "./Modules/LinkingManager");

  var _LinkingManager2 = _interopRequireDefault(_LinkingManager);

  var _Location = _require(_dependencyMap[8], "./Modules/Location");

  var _Location2 = _interopRequireDefault(_Location);

  var _LocationObserver = _require(_dependencyMap[9], "./Modules/LocationObserver");

  var _LocationObserver2 = _interopRequireDefault(_LocationObserver);

  var _Networking = _require(_dependencyMap[10], "./Modules/Networking");

  var _Networking2 = _interopRequireDefault(_Networking);

  var _PlatformConstants = _require(_dependencyMap[11], "./Modules/PlatformConstants");

  var _PlatformConstants2 = _interopRequireDefault(_PlatformConstants);

  var _RCTResourceManager = _require(_dependencyMap[12], "./Utils/RCTResourceManager");

  var _RCTInputControls = _require(_dependencyMap[13], "./Utils/RCTInputControls");

  var _RCTHeadModel = _require(_dependencyMap[14], "./Utils/RCTHeadModel");

  var _RCTHeadModel2 = _interopRequireDefault(_RCTHeadModel);

  var _RCTVideoModule = _require(_dependencyMap[15], "./Modules/RCTVideoModule");

  var _RCTVideoModule2 = _interopRequireDefault(_RCTVideoModule);

  var _RCTAudioModule = _require(_dependencyMap[16], "./Modules/RCTAudioModule");

  var _RCTAudioModule2 = _interopRequireDefault(_RCTAudioModule);

  var _TextureManager = _require(_dependencyMap[17], "./Utils/TextureManager");

  var _TextureManager2 = _interopRequireDefault(_TextureManager);

  var _Timing = _require(_dependencyMap[18], "./Modules/Timing");

  var _Timing2 = _interopRequireDefault(_Timing);

  var _UIManager = _require(_dependencyMap[19], "./Modules/UIManager");

  var _UIManager2 = _interopRequireDefault(_UIManager);

  var _WebSocketModule = _require(_dependencyMap[20], "./Modules/WebSocketModule");

  var _WebSocketModule2 = _interopRequireDefault(_WebSocketModule);

  var _ReactVRConstants = _require(_dependencyMap[21], "./Modules/ReactVRConstants");

  var _ReactVRConstants2 = _interopRequireDefault(_ReactVRConstants);

  var _RCTExceptionsManager = _require(_dependencyMap[22], "./Modules/RCTExceptionsManager");

  var _RCTExceptionsManager2 = _interopRequireDefault(_RCTExceptionsManager);

  var _RCTSourceCode = _require(_dependencyMap[23], "./Modules/RCTSourceCode");

  var _RCTSourceCode2 = _interopRequireDefault(_RCTSourceCode);

  var _GuiSysEvent = _require(_dependencyMap[24], "./OVRUI/UIView/GuiSysEvent");

  var _three = _require(_dependencyMap[25], "three");

  var THREE = _interopRequireWildcard(_three);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ROOT_VIEW_INCREMENT = 10;
  var ONMOVE_EPSILON = 0.0001;

  function describe(ctx) {
    var remoteModuleConfig = [];

    for (var _iterator = ctx.modules, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var module = _ref;

      var description = module.__describe();

      if (__DEV__) {
        console.log(description);
      }

      remoteModuleConfig.push(description);
    }

    return remoteModuleConfig;
  }

  var ReactNativeContext = exports.ReactNativeContext = function () {
    function ReactNativeContext(guiSys, executor) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, ReactNativeContext);

      this.modules = [];
      this.currentRootTag = 1;
      this.executor = executor;
      this.guiSys = guiSys;
      this.messages = [];
      this.isLowLatency = !!options.isLowLatency;
      this.enableHotReload = !!options.enableHotReload;
      this.lastHit = null;
      this.lastLocalIntersect = null;
      this.lastSource = null;
      this.UIManager = new _UIManager2.default(this, guiSys, options.customViews);
      this.Timing = new _Timing2.default(this);
      this.RCTResourceManager = new _RCTResourceManager.RCTResourceManager();
      this.RCTInputControls = new _RCTInputControls.RCTInputControls(this, guiSys);
      this.HeadModel = new _RCTHeadModel2.default(this);
      this.VideoModule = new _RCTVideoModule2.default(this);
      this.AudioModule = new _RCTAudioModule2.default(this);
      this.TextureManager = new _TextureManager2.default();
      this.GlyphTextures = new _GlyphTextures2.default(this);
      this._moduleForTag = [];
      this._cameraParentFromTag = [];
      this.registerModule(this.UIManager);
      this.registerModule(new _AndroidConstants2.default());
      this.registerModule(new _AsyncLocalStorage2.default(this));
      this.registerModule(new _ControllerInfo2.default(this));
      this.registerModule(new _DeviceInfo2.default());
      this.registerModule(new _History2.default(this));
      this.registerModule(new _Networking2.default(this));
      this.registerModule(new _LinkingManager2.default(this));
      this.registerModule(new _Location2.default(this));
      this.registerModule(new _LocationObserver2.default(this));
      this.registerModule(new _PlatformConstants2.default());
      this.registerModule(this.Timing);
      this.registerModule(this.VideoModule);
      this.registerModule(this.AudioModule);
      this.registerModule(new _WebSocketModule2.default(this));
      this.registerModule(new _ReactVRConstants2.default());
      this.registerModule(new _RCTExceptionsManager2.default());
      this.registerModule(new _RCTSourceCode2.default(this));
      this.registerModule(new _ExternalAssets2.default(options.assetRoot || ''));
      this.registerModule(this.GlyphTextures);
      guiSys.eventDispatcher.addEventListener('GuiSysEvent', this._onGuiSysEvent.bind(this));
      guiSys.eventDispatcher.addEventListener('UIViewEvent', this._onUIViewEvent.bind(this));
    }

    _createClass(ReactNativeContext, [{
      key: "init",
      value: function init(bundle) {
        this.executor.moduleConfig(describe(this));
        this.executor.exec(bundle);

        if (this.enableHotReload) {
          var bundleURL = new URL(bundle);
          console.warn("HotReload on " + bundle);
          this.callFunction('HMRClient', 'enable', ['vr', bundleURL.pathname.toString().substr(1), bundleURL.hostname, bundleURL.port]);
        }
      }
    }, {
      key: "shutdown",
      value: function shutdown() {
        for (var _iterator2 = this.modules, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var module = _ref2;

          if (typeof module.shutdown === 'function') {
            module.shutdown();
          }
        }
      }
    }, {
      key: "createRootView",
      value: function createRootView(module, props, container, inSurfaceContext) {
        var tag = this.currentRootTag;
        this.currentRootTag += ROOT_VIEW_INCREMENT;
        this.executor.call('AppRegistry', 'runApplication', [module, {
          initialProps: props,
          rootTag: tag
        }]);
        this._moduleForTag[tag] = module;

        if (!container) {
          this._cameraParentFromTag[tag] = new THREE.Object3D();
        }

        this.UIManager.createRootView(tag, container, inSurfaceContext);
        return tag;
      }
    }, {
      key: "updateRootView",
      value: function updateRootView(tag, props) {
        this.executor.call('AppRegistry', 'runApplication', [this._moduleForTag[tag], {
          initialProps: props,
          rootTag: tag
        }]);
      }
    }, {
      key: "destroyRootView",
      value: function destroyRootView(tag) {
        delete this._moduleForTag[tag];
        var cameraParent = this._cameraParentFromTag[tag];

        if (cameraParent) {
          for (var _iterator3 = cameraParent.children, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref3;

            if (_isArray3) {
              if (_i3 >= _iterator3.length) break;
              _ref3 = _iterator3[_i3++];
            } else {
              _i3 = _iterator3.next();
              if (_i3.done) break;
              _ref3 = _i3.value;
            }

            var child = _ref3;
            cameraParent.remove(child);
          }

          delete this._cameraParentFromTag[tag];
        }

        this.executor.call('AppRegistry', 'unmountApplicationComponentAtRootTag', [tag]);
      }
    }, {
      key: "_onGuiSysEvent",
      value: function _onGuiSysEvent(event) {
        switch (event.eventType) {
          case _GuiSysEvent.GuiSysEventType.HIT_CHANGED:
            if (this.lastHit !== event.args.currentHit || this.lastSource !== event.args.currentSource) {
              this.lastHit = event.args.currentHit;
              this.lastSource = event.args.currentSource;
            }

            break;

          default:
            break;
        }
      }
    }, {
      key: "_onUIViewEvent",
      value: function _onUIViewEvent(event) {
        switch (event.eventType) {
          case _GuiSysEvent.UIViewEventType.FOCUS_LOST:
            {
              var viewTag = event.view ? this.getHitTag(event.view) : undefined;
              var targetTag = event.args.target ? this.getHitTag(event.args.target) : undefined;
              var payload = {
                target: targetTag,
                source: event.args.source
              };

              if (viewTag) {
                this.callFunction('RCTEventEmitter', 'receiveEvent', [viewTag, 'topExit', payload]);
              }
            }
            break;

          case _GuiSysEvent.UIViewEventType.FOCUS_GAINED:
            {
              var _viewTag = event.view ? this.getHitTag(event.view) : undefined;

              var _targetTag = event.args.target ? this.getHitTag(event.args.target) : undefined;

              var _payload = {
                target: _targetTag,
                source: event.args.source
              };

              if (_viewTag) {
                this.callFunction('RCTEventEmitter', 'receiveEvent', [_viewTag, 'topEnter', _payload]);
              }
            }
            break;

          default:
            break;
        }
      }
    }, {
      key: "frame",
      value: function frame(camera, rootTag) {
        var frameStart = window.performance ? performance.now() : Date.now();
        this.Timing && this.Timing.frame(frameStart);

        if (this.lastHit && this.lastHit.owner && this.lastHit.owner.receivesMoveEvent) {
          var intersect = this.guiSys.getLastLocalIntersect();

          if (!intersect) {
            this.lastLocalIntersect = null;
          }

          if (intersect) {
            var lastLocalIntersect = this.lastLocalIntersect;

            if (!lastLocalIntersect || Math.abs(intersect[0] - lastLocalIntersect[0]) > ONMOVE_EPSILON || Math.abs(intersect[1] - lastLocalIntersect[1]) > ONMOVE_EPSILON) {
              var viewTag = this.getHitTag(this.lastHit);
              var payload = {
                offset: intersect
              };
              this.callFunction('RCTEventEmitter', 'receiveEvent', [viewTag, 'topMove', payload]);
              this.lastLocalIntersect = intersect;
            }
          }
        }

        this.executor.flush();
        var msg = this.executor.poll();

        while (msg) {
          if (msg.cmd === 'exec') {
            var results = msg.results;

            if (results && results.length >= 3) {
              var moduleIndex = results[0];
              var funcIndex = results[1];
              var params = results[2];

              for (var i = 0; i < moduleIndex.length; i++) {
                this.modules[moduleIndex[i]].__functionMap[funcIndex[i]].apply(this.modules[moduleIndex[i]], params[i]);
              }
            }
          }

          msg = this.executor.poll();
        }

        this.UIManager && this.UIManager.frame(frameStart);
        this.HeadModel && this.HeadModel.frame(camera);
        this.VideoModule && this.VideoModule.frame();
        this.AudioModule && this.AudioModule.frame(camera);
        this.TextureManager.frame();

        if (rootTag) {
          this._applySceneTransform(camera, rootTag);
        }

        this.Timing && this.Timing.idle(frameStart);
      }
    }, {
      key: "_applySceneTransform",
      value: function _applySceneTransform(camera, rootTag) {
        var worldMatrix = this.UIManager.getSceneCameraTransform(rootTag);
        var cameraParent = this._cameraParentFromTag[rootTag];

        if (!worldMatrix || !cameraParent) {
          return;
        }

        if (camera.parent && camera.parent.uuid !== cameraParent.uuid) {
          console.warn('Camera object already has a parent; ' + "Use of 'transform' property on <Scene> will have no effect.");
          this._cameraParentFromTag[rootTag] = null;
          return;
        }

        if (cameraParent.children.length === 0) {
          cameraParent.add(camera);
        }

        cameraParent.matrixAutoUpdate = false;
        cameraParent.matrix.fromArray(worldMatrix);
        cameraParent.updateMatrixWorld(true);
      }
    }, {
      key: "getHitTag",
      value: function getHitTag(hitStart) {
        var hit = hitStart;

        while (hit) {
          if (hit.tag) {
            return hit.tag;
          }

          hit = hit.parent;
        }

        return undefined;
      }
    }, {
      key: "callFunction",
      value: function callFunction(moduleName, functionName, args) {
        this.executor.call(moduleName, functionName, args);
      }
    }, {
      key: "invokeCallback",
      value: function invokeCallback(id, args) {
        this.executor.invoke(id, args);
      }
    }, {
      key: "registerModule",
      value: function registerModule(module) {
        this.modules.push(module);
      }
    }, {
      key: "registerTextureSource",
      value: function registerTextureSource(name, source) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        this.TextureManager.registerLocalTextureSource(name, source, options);
      }
    }, {
      key: "getViewForTag",
      value: function getViewForTag(reactTag) {
        return this.UIManager.getViewForTag(reactTag);
      }
    }]);

    return ReactNativeContext;
  }();
});