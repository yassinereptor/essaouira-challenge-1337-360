__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var IDLE_CALLBACK_THRESHOLD = 1;

  var Timing = function (_Module) {
    _inherits(Timing, _Module);

    function Timing(rnctx) {
      _classCallCheck(this, Timing);

      var _this = _possibleConstructorReturn(this, (Timing.__proto__ || Object.getPrototypeOf(Timing)).call(this, 'Timing'));

      _this._timers = {};
      _this._rnctx = rnctx;
      _this._sendIdleEvents = false;
      _this._targetFrameDuration = 1000.0 / (rnctx.isLowLatency ? 90.0 : 60.0);
      return _this;
    }

    _createClass(Timing, [{
      key: "createTimer",
      value: function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
        var currentTimeMillis = Date.now();
        var currentDateNowTimeMillis = jsSchedulingTime + 1000 / 60;
        var adjustedDuration = Math.max(0.0, jsSchedulingTime - currentDateNowTimeMillis + duration);
        var initialTargetTime = currentTimeMillis + adjustedDuration;
        this._timers[String(callbackID)] = {
          callbackID: callbackID,
          duration: duration,
          jsSchedulingTime: initialTargetTime,
          repeats: repeats
        };
      }
    }, {
      key: "deleteTimer",
      value: function deleteTimer(callbackID) {
        delete this._timers[String(callbackID)];
      }
    }, {
      key: "setSendIdleEvents",
      value: function setSendIdleEvents(sendIdle) {
        this._sendIdleEvents = sendIdle;
      }
    }, {
      key: "frame",
      value: function frame(frameStart) {
        var toRemove = [];
        var timers = [];
        var time = Date.now();

        for (var timer in this._timers) {
          var t = this._timers[timer];

          if (t.jsSchedulingTime <= time) {
            timers.push(this._timers[timer].callbackID);

            if (t.repeats) {
              t.jsSchedulingTime += t.duration;
            } else {
              toRemove.push(timer);
            }
          }
        }

        if (timers.length) {
          this._rnctx.callFunction('JSTimers', 'callTimers', [timers]);
        }

        for (var _iterator = toRemove, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var _timer = _ref;
          delete this._timers[_timer];
        }
      }
    }, {
      key: "idle",
      value: function idle(frameStart) {
        if (!this._sendIdleEvents) {
          return;
        }

        var now = window.performance ? performance.now() : Date.now();
        var frameElapsed = now - frameStart;

        if (this._targetFrameDuration - frameElapsed >= IDLE_CALLBACK_THRESHOLD) {
          this._rnctx.callFunction('JSTimers', 'callIdleCallbacks', [Date.now() - frameElapsed]);
        }
      }
    }]);

    return Timing;
  }(_Module3.default);

  exports.default = Timing;
});