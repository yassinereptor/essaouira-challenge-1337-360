__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var getGamepads = (navigator.getGamepads ? navigator.getGamepads : navigator.webkitGetGamepads ? navigator.webkitGetGamepads : function () {
    return [];
  }).bind(navigator);

  function extractInfo(gamepad) {
    if (!gamepad) {
      return null;
    }

    return {
      index: gamepad.index,
      id: gamepad.id,
      buttons: gamepad.buttons.length,
      axes: gamepad.axes.length,
      hand: gamepad.hand || null
    };
  }

  var ControllerInfo = function (_Module) {
    _inherits(ControllerInfo, _Module);

    function ControllerInfo(rnctx) {
      _classCallCheck(this, ControllerInfo);

      var _this = _possibleConstructorReturn(this, (ControllerInfo.__proto__ || Object.getPrototypeOf(ControllerInfo)).call(this, 'ControllerInfo'));

      _this._rnctx = rnctx;
      window.addEventListener('gamepadconnected', function (e) {
        _this._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['controllerConnected', extractInfo(e.gamepad)]);
      });
      window.addEventListener('gamepaddisconnected', function (e) {
        _this._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['controllerDisconnected', extractInfo(e.gamepad)]);
      });
      return _this;
    }

    _createClass(ControllerInfo, [{
      key: "$getControllers",
      value: function $getControllers(success) {
        var controllers = [];
        var gamepads = getGamepads();

        for (var i = 0; i < gamepads.length; i++) {
          var gamepad = gamepads[i];

          if (gamepad) {
            controllers.push(extractInfo(gamepads[i]));
          }
        }

        this._rnctx.invokeCallback(success, [controllers]);
      }
    }]);

    return ControllerInfo;
  }(_Module3.default);

  exports.default = ControllerInfo;
});