__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var RCTExceptionsManager = function (_Module) {
    _inherits(RCTExceptionsManager, _Module);

    function RCTExceptionsManager() {
      _classCallCheck(this, RCTExceptionsManager);

      var _this = _possibleConstructorReturn(this, (RCTExceptionsManager.__proto__ || Object.getPrototypeOf(RCTExceptionsManager)).call(this, 'RCTExceptionsManager'));

      _this.hadFatal = undefined;
      return _this;
    }

    _createClass(RCTExceptionsManager, [{
      key: "displayStackAndMessage",
      value: function displayStackAndMessage(stack, message) {
        var output = '\n';

        if (message.indexOf('has not been registered') === -1 || message.indexOf('AppRegistry.registerComponent') === -1) {
          output += '-----\n';

          for (var i = 0; i < stack.length; i++) {
            var _file = stack[i].file || '[unknown]';

            var _methodName = stack[i].methodName || '[unknown]';

            var _lineNumber = stack[i].lineNumber || 0;

            var _column = stack[i].column || 0;

            output += '> ' + _methodName + '@' + _file + ' ' + _lineNumber + ':' + _column + '\n';
          }

          output += '-----\n';
        }

        output += message || '';
        console.error(output);
      }
    }, {
      key: "reportSoftException",
      value: function reportSoftException(message, stack, exceptionId) {
        if (this.hadFatal) {
          return;
        }

        var reverseStack = stack.slice();
        reverseStack.reverse();
        this.displayStackAndMessage(reverseStack, message);
      }
    }, {
      key: "reportFatalException",
      value: function reportFatalException(message, stack, exceptionId) {
        if (this.hadFatal) {
          return;
        }

        var reverseStack = stack.slice();
        reverseStack.reverse();
        this.displayStackAndMessage(reverseStack, message);
        this.hadFatal = exceptionId;
      }
    }, {
      key: "updateExceptionMessage",
      value: function updateExceptionMessage(message, stack, exceptionId) {
        if (this.hadFatal && this.hadFatal !== exceptionId) {
          return;
        }

        var reverseStack = stack.slice();
        reverseStack.reverse();

        for (var i = 0; i < reverseStack.length; i++) {
          if (reverseStack[i].file && reverseStack[i].file.indexOf(':') <= 2) {
            reverseStack[i].file = 'file:///' + reverseStack[i].file;
          }
        }

        this.displayStackAndMessage(reverseStack, message);
      }
    }, {
      key: "reportUnhandledException",
      value: function reportUnhandledException(message, stack) {
        if (this.hadFatal) {
          return;
        }

        var reverseStack = stack.slice();
        reverseStack.reverse();
        this.displayStackAndMessage(reverseStack, message);
      }
    }]);

    return RCTExceptionsManager;
  }(_Module3.default);

  exports.default = RCTExceptionsManager;
});