__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Module2 = _require(_dependencyMap[0], "./Module");

  var _Module3 = _interopRequireDefault(_Module2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AsyncLocalStorage = function (_Module) {
    _inherits(AsyncLocalStorage, _Module);

    function AsyncLocalStorage(rnctx) {
      _classCallCheck(this, AsyncLocalStorage);

      var _this = _possibleConstructorReturn(this, (AsyncLocalStorage.__proto__ || Object.getPrototypeOf(AsyncLocalStorage)).call(this, 'AsyncLocalStorage'));

      _this._rnctx = rnctx;
      _this._db = null;
      return _this;
    }

    _createClass(AsyncLocalStorage, [{
      key: "_prepareDB",
      value: function _prepareDB() {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          if (_this2._db) {
            return resolve(_this2._db);
          }

          var request = window.indexedDB.open('AsyncStorage', 1);

          request.onerror = function (event) {
            reject({
              message: 'Error opening database'
            });
          };

          request.onupgradeneeded = function (event) {
            var db = event.target.result;
            _this2._db = db;
            db.createObjectStore('pairs', {
              keyPath: 'key'
            });
            resolve(db);
          };

          request.onsuccess = function (event) {
            var db = event.target.result;
            _this2._db = db;
            resolve(db);
          };
        });
      }
    }, {
      key: "_getRow",
      value: function _getRow(objectStore, key) {
        return new Promise(function (resolve, reject) {
          var request = objectStore.get(key);

          request.onerror = function (event) {
            reject({
              message: event.target.error.name,
              key: key
            });
          };

          request.onsuccess = function (event) {
            var row = event.target.result;

            if (!row) {
              resolve([key, undefined]);
            } else {
              resolve([row.key, row.value]);
            }
          };
        });
      }
    }, {
      key: "_putRow",
      value: function _putRow(objectStore, row) {
        return new Promise(function (resolve, reject) {
          var request = objectStore.put(row);

          request.onerror = function (event) {
            reject({
              message: event.target.error.name,
              key: row.key
            });
          };

          request.onsuccess = function () {
            resolve();
          };
        });
      }
    }, {
      key: "_deleteRow",
      value: function _deleteRow(objectStore, key) {
        return new Promise(function (resolve, reject) {
          var request = objectStore.delete(key);

          request.onerror = function (event) {
            reject({
              message: event.target.error.name,
              key: key
            });
          };

          request.onsuccess = function () {
            resolve();
          };
        });
      }
    }, {
      key: "multiGet",
      value: function multiGet(keys, cb) {
        var _this3 = this;

        this._prepareDB().then(function (db) {
          var transaction = db.transaction(['pairs']);
          var objectStore = transaction.objectStore('pairs');
          var gets = [];
          keys.forEach(function (key) {
            return gets.push(_this3._getRow(objectStore, key));
          });
          return Promise.all(gets);
        }).then(function (rows) {
          _this3._rnctx.invokeCallback(cb, [undefined, rows]);
        }, function (err) {
          _this3._rnctx.invokeCallback(cb, [err]);
        });
      }
    }, {
      key: "multiSet",
      value: function multiSet(pairs, cb) {
        var _this4 = this;

        this._prepareDB().then(function (db) {
          var transaction = db.transaction(['pairs'], 'readwrite');
          var objectStore = transaction.objectStore('pairs');
          var puts = [];
          pairs.forEach(function (pair) {
            var row = {
              key: pair[0],
              value: pair[1]
            };
            puts.push(_this4._putRow(objectStore, row));
          });
          return Promise.all(puts);
        }).then(function () {
          _this4._rnctx.invokeCallback(cb, []);
        }, function (err) {
          _this4._rnctx.invokeCallback(cb, [err]);
        });
      }
    }, {
      key: "multiRemove",
      value: function multiRemove(keys, cb) {
        var _this5 = this;

        this._prepareDB().then(function (db) {
          var transaction = db.transaction(['pairs'], 'readwrite');
          var objectStore = transaction.objectStore('pairs');
          var deletes = [];
          keys.forEach(function (key) {
            return deletes.push(_this5._deleteRow(objectStore, key));
          });
          return Promise.all(deletes);
        }).then(function () {
          _this5._rnctx.invokeCallback(cb, []);
        }, function (err) {
          _this5._rnctx.invokeCallback(cb, [err]);
        });
      }
    }, {
      key: "clear",
      value: function clear(cb) {
        var _this6 = this;

        this._prepareDB().then(function (db) {
          return new Promise(function (resolve, reject) {
            var transaction = db.transaction(['pairs'], 'readwrite');
            var objectStore = transaction.objectStore('pairs');
            var request = objectStore.clear();

            request.onerror = function (event) {
              reject({
                message: event.target.error.name
              });
            };

            request.onsuccess = function () {
              resolve();
            };
          });
        }).then(function () {
          _this6._rnctx.invokeCallback(cb, []);
        }, function (err) {
          _this6._rnctx.invokeCallback(cb, [err]);
        });
      }
    }, {
      key: "getAllKeys",
      value: function getAllKeys(cb) {
        var _this7 = this;

        this._prepareDB().then(function (db) {
          return new Promise(function (resolve, reject) {
            var transaction = db.transaction(['pairs']);
            var objectStore = transaction.objectStore('pairs');
            var request = objectStore.openCursor();
            var keys = [];

            request.onerror = function (event) {
              reject({
                message: event.target.error.name
              });
            };

            request.onsuccess = function (event) {
              var cursor = event.target.result;

              if (cursor) {
                keys.push(cursor.key);
                cursor.continue();
              } else {
                resolve(keys);
              }
            };
          });
        }).then(function (keys) {
          _this7._rnctx.invokeCallback(cb, [undefined, keys]);
        }, function (err) {
          _this7._rnctx.invokeCallback(cb, [err]);
        });
      }
    }]);

    return AsyncLocalStorage;
  }(_Module3.default);

  exports.default = AsyncLocalStorage;
});