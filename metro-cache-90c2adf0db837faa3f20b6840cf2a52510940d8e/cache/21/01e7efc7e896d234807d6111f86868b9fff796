__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.rotateByQuaternion = rotateByQuaternion;
  exports.quaternionMultiply = quaternionMultiply;
  exports.quaternionPremultiply = quaternionPremultiply;
  exports.setQuatFromEuler = setQuatFromEuler;
  exports.setQuatFromAxisAngle = setQuatFromAxisAngle;
  exports.setQuatFromXRotation = setQuatFromXRotation;
  exports.setQuatFromYRotation = setQuatFromYRotation;
  exports.setQuatFromZRotation = setQuatFromZRotation;
  exports.matrixMultiply4 = matrixMultiply4;

  function rotateByQuaternion(v, q) {
    var qx = q[0];
    var qy = q[1];
    var qz = q[2];
    var qw = q[3];
    var vx = v[0];
    var vy = v[1];
    var vz = v[2];
    var qx2 = qx + qx;
    var qy2 = qy + qy;
    var qz2 = qz + qz;
    var xx2 = qx * qx2;
    var yy2 = qy * qy2;
    var zz2 = qz * qz2;
    var xy2 = qx * qy2;
    var xz2 = qx * qz2;
    var yz2 = qy * qz2;
    var wx2 = qw * qx2;
    var wy2 = qw * qy2;
    var wz2 = qw * qz2;
    v[0] = (1 - yy2 - zz2) * vx + (xy2 - wz2) * vy + (xz2 + wy2) * vz;
    v[1] = (xy2 + wz2) * vx + (1 - xx2 - zz2) * vy + (yz2 - wx2) * vz;
    v[2] = (xz2 - wy2) * vx + (yz2 + wx2) * vy + (1 - xx2 - yy2) * vz;
  }

  function quaternionMultiply(a, b) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    var aw = a[3];
    var bx = b[0];
    var by = b[1];
    var bz = b[2];
    var bw = b[3];
    a[0] = ax * bw + aw * bx + ay * bz - az * by;
    a[1] = ay * bw + aw * by + az * bx - ax * bz;
    a[2] = az * bw + aw * bz + ax * by - ay * bx;
    a[3] = aw * bw - ax * bx - ay * by - az * bz;
  }

  function quaternionPremultiply(b, a) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    var aw = a[3];
    var bx = b[0];
    var by = b[1];
    var bz = b[2];
    var bw = b[3];
    b[0] = ax * bw + aw * bx + ay * bz - az * by;
    b[1] = ay * bw + aw * by + az * bx - ax * bz;
    b[2] = az * bw + aw * bz + ax * by - ay * bx;
    b[3] = aw * bw - ax * bx - ay * by - az * bz;
  }

  function setQuatFromEuler(quat, x, y, z) {
    var cx = Math.cos(x / 2);
    var cy = Math.cos(y / 2);
    var cz = Math.cos(z / 2);
    var sx = Math.sin(x / 2);
    var sy = Math.sin(y / 2);
    var sz = Math.sin(z / 2);
    quat[0] = sx * cy * cz + cx * sy * sz;
    quat[1] = cx * sy * cz - sx * cy * sz;
    quat[2] = cx * cy * sz - sx * sy * cz;
    quat[3] = cx * cy * cz + sx * sy * sz;
  }

  function setQuatFromAxisAngle(quat, axis, angle) {
    var half = angle / 2;
    var sin = Math.sin(half);
    var cos = Math.cos(half);
    quat[0] = axis[0] * sin;
    quat[1] = axis[1] * sin;
    quat[2] = axis[2] * sin;
    quat[3] = cos;
  }

  function setQuatFromXRotation(quat, x) {
    var half = x / 2;
    quat[0] = Math.sin(half);
    quat[1] = 0;
    quat[2] = 0;
    quat[3] = Math.cos(half);
  }

  function setQuatFromYRotation(quat, y) {
    var half = y / 2;
    quat[0] = 0;
    quat[1] = Math.sin(half);
    quat[2] = 0;
    quat[3] = Math.cos(half);
  }

  function setQuatFromZRotation(quat, z) {
    var half = z / 2;
    quat[0] = 0;
    quat[1] = 0;
    quat[2] = Math.sin(half);
    quat[3] = Math.cos(half);
  }

  function matrixMultiply4(a, b) {
    var q = a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12];
    var r = a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13];
    var s = a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14];
    var t = a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15];
    a[0] = q;
    a[1] = r;
    a[2] = s;
    a[3] = t;
    q = a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12];
    r = a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13];
    s = a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14];
    t = a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15];
    a[4] = q;
    a[5] = r;
    a[6] = s;
    a[7] = t;
    q = a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12];
    r = a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13];
    s = a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14];
    t = a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15];
    a[8] = q;
    a[9] = r;
    a[10] = s;
    a[11] = t;
    q = a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12];
    r = a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13];
    s = a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14];
    t = a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15];
    a[12] = q;
    a[13] = r;
    a[14] = s;
    a[15] = t;
  }
});